<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux Java,Tomcat-Server中Time和服务器中不一致]]></title>
    <url>%2F2018%2F11%2F20%2FLinux%20Java%2CTomcat-Server%E4%B8%ADTime%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E4%B8%8D%E4%B8%80%E8%87%B4%2F</url>
    <content type="text"><![CDATA[今天在测试任务调度过程中，发现已经到时间了，结果任务调度还是不执行，因为在代码中取得时间是 new Date(),于是排查服务器的时间 Fri Nov 25 11:29:31 CST 2018 是正确的，又排查 java 的时间 Fri Nov 25 11:29:31 CST 2018 也是正确，在 tomcat 容器中运行一个 jsp 打印了一下时间 Fri Nov 25 04:43:51 GMT 2018 发现少了8小时 明显jsp中打印的时间时区为GMT CET,UTC,GMT,CST几种常见时间概述与关系 已经过以上测试，可能是Tomcat问题，那么修改tomcat 启动参数http: //free.yes81.net/yes81/view-13576.html 按照以上方式修改后，tomcat内Date时间正常 过程中还发现一个问题我的系统中 /etc/sysconfig/clock 文件只有一行（文件说明） ZONE=”Asia/Shanghai”并没有这两行。 UTC=falseARC=false加上后，tomcat不修改时间也是正常。 后经过搜索返现一篇博文http: //blog.tangjianwei.com/2009/06/04/the-problem-of-tomcat-timezone/启动提到：tomcat读取的可能是硬件时间（BIOS时间）而UTC=falseUTC – 指定BIOS中保存的时间是否是GMT/UTC时间，true表示BIOS里面保存的时间是UTC时间，false表示BIOS里面保存的时间是本地时间。 所以判断 可能为之前没有设置 /etc/sysconfig/clock 中 UTC=false，倒置tomcat读取时区出现问题倒置。 到此问题基本解决。 其他相关博文http: //escode.blog.51cto.com/2025829/1147439 转载 原文地址 https: //www.cnblogs.com/weihuang6620/p/9268880.html]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并行与并发]]></title>
    <url>%2F2018%2F11%2F20%2F%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91%2F</url>
    <content type="text"><![CDATA[并行与并发并发和并行最开始都是操作系统中的概念，表示的是CPU执行多个任务的方式。这两个概念极容易混淆。 并行1.什么是并行？并行（Parallel），当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。 (只有在系统有多个 CPU 的时候才会出现真正意义上的并行)多个人同事做多件事 并发1.什么是并发？并发实际就是 cpu 时间片的切换，在单核 CPU 中，CPU同一时间内只能做一件事情，Windown 系统为了让其看起来是“同时做多件事请”，把 CPU 的时间划划分长短基本相同的时间区间，既“时间片”，通过操作系统的管理，把这些时间片进行轮流的分配给各个应用使用，这样，给用户的感觉就是他在同时进行听歌和打游戏，实际上，在操作系统中，CPU 是在听歌进程和游戏进程中来回快速的切换。这个是我们所理解的并发，那么并发的定义到底是什么呢？并发（Concurrent），在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。一个人同事做多件事 并行和并发的区别并发，指的是多个事情，在同一时间段内同时发生了。并行，指的是多个事情，在同一时间点上同时发生了。 并发的多个任务之间是互相抢占资源的。并行的多个任务之间是不互相抢占资源的、 只有在多CPU的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。 就像上面这张图，只有一个咖啡机的时候，一台咖啡机其实是在并发被使用的。而有多个咖啡机的时候，多个咖啡机之间才是并行被使用的。]]></content>
      <categories>
        <category>阅读理解</category>
      </categories>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下Docker的安装使用]]></title>
    <url>%2F2018%2F10%2F17%2FMac%E4%B8%8BDocker%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Mac下Docker的安装使用1.什么是 dockerDocker，可以说是一个终端命令行的虚拟机，但更准确的说法，其实应该是一个虚拟环境。比如，你想要在PC上无缝使用Linux么？那么虚拟机并不是你唯一的出路，你还有Docker！我更愿意称Docker为一个容器，当然这只是Docker的一个狭义解释，Docker不止是一个容器。Docker包含3个重要概念： 一个，是镜像（Image），镜像是静态的、可以被用户互相分享的文件。我们玩过双系统和虚拟机的人都知道，首先你需要一个.iso镜像，才能安装系统。Docker中的镜像也是这个东西，镜像是静态的，你不能对他操作，只能pull别人的镜像或者push自己的镜像。还有一个，是容器（Container），前面说过，镜像是静态不可操作的，只能被分享和下载，那什么是能被操作的呢？就是容器里！容器可以理解为镜像的动态状态，也就是我们虚拟机中系统装好后的状态，其实这么说是不对的，容器最符合的描述应该是Linux的iso文件的Live CD模式，比如我们玩双系统时都进入过Live CD模式，不安装系统而直接进入系统，很神奇是吧，Docker的容器就是这个概念，只不过更加轻量更加迅速便捷。但是Live CD的害处就是你关机后作出的修改安装的软件全部gg，容器也是一样，一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在。 最后，是仓库（Repository）。各位在前面看到我写的pull和push什么的，有没有晕？不知道各位对于git熟悉不熟悉，Docker中的仓库很像git的代码仓库，你可以pull自己之前push到自己仓库的镜像到本地，也可以pull别人push到公共仓库的镜像到自己本地。说白了就是百度云盘，你可以上传（push）自己做好环境的Docker上去，也可以下载（pull）自己云端的镜像到本地。同时，我们知道百度云最大的特点就是分享（你懂的嘿嘿嘿），类比Docker，如果你得到百度云分享链接（别人的镜像名字、标签和别人的用户名），你还可以下载（pull）别人分享的镜像到自己的本地，别人也可以下载（pull）你的镜像，因为Docker仓库都是公共的。当然，每个免费用户有一个名额把自己的一个镜像设为私有，也就是禁止被分享给别人，类比百度云上你自己保存的而没有被生成分享链接的小姐姐。作者：sgyzetrov来源：CSDN原文：https://blog.csdn.net/S_gy_Zetrov/article/details/78161154?utm_source=copy版权声明：本文为博主原创文章，转载请附上博文链接！ 2.安装 dockerbrew cask install没有安装 brew 请先安装 brew3.拉取自己需要的镜像(比如 Oracle)docker pull alexeiled/docker-oracle-xe-11g4.拉取完成后，启动镜像docker run -h &quot;oracle&quot; --name &quot;oracle&quot; -d -p 49160:22 -p 49161:1521 -p 49162:8080 alexeiled/docker-oracle-xe-11g 每运行一次镜像都会启动一个容器,容器删除后，可以通过运行镜像再次获得，但是镜像删除后，就只能重新拉取了-p 49160:22 -p 49161:1521 -p 49162:8080 这一段的意思是把 oracle 容器的1521，22，8080，端口都映射到本机的49160端口 5.命令介绍1.docker ps 查看当前运行的容器 -a 查看所有的容器（包括关闭的）2.docker exec -it eb98bda6646d /bin/bash 进入容器eb98bda6646d这个是上一步查出来的容器 id3.docker stop eb98bda6646d 停止正在运行的容器4.docker start eb98bda6646d 重新启动已经停止的容器5.docker rm eb98bda6646d 删除容器6.docker images 查看所有镜像7.docker rmi alexeiled/docker-oracle-xe-11g 删除 镜像alexeiled/docker-oracle-xe-11g 镜像的名称]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>基础</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven入门使用]]></title>
    <url>%2F2018%2F09%2F25%2FMaven%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言夜空中最亮的星，2018请照亮我前行~ Maven是我们日常开发都会用到的，新年第一天，把看过的Maven基础概念做了整理，作为入门和查阅使用。 正文Maven概念Maven作为一个构建工具，不仅能帮我们自动化构建，还能够抽象构建过程，提供构建任务实现;它跨平台，对外提供了一致的操作接口，这一切足以使它成为优秀的、流行的构建工具。 Maven不仅是构建工具，还是一个依赖管理工具和项目管理工具，它提供了中央仓库，能帮我自动下载构件。 maven的安装一：因为本人是window系统，所以这里只介绍window下如何安装，在安装Maven之前，先确认已经安装了JDK. image.png 二：接着去Maven官网下载界面下载想要的版本解压到你想要的目录就行 image.png image.png 三：最后设置一下环境变量，将Maven安装配置到操作系统环境中，主要就是配置M2_HOME 和PATH两项，如图 image.png 都搞定后，验证一下，打开doc输入 mvn -v如何得到下面信息就说明配置成功了 image.png maven目录 image.png bin目录：该目录包含了mvn运行的脚本，这些脚本用来配置java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。 boot目录:该目录只包含一个文件，该文件为plexus-classworlds-2.5.2.jar。plexus-classworlds是一个类加载器框架，相对于默认的java类加载器，它提供了更加丰富的语法以方便配置，Maven使用该框架加载自己的类库。 conf目录:该目录包含了一个非常重要的文件settings.xml。直接修改该文件，就能在机器上全局地定制Maven的行为，一般情况下，我们更偏向于复制该文件至/.m2/目录下（表示用户目录），然后修改该文件，在用户范围定制Maven的行为。 lib目录:该目录包含了所有Maven运行时需要的Java类库，Maven本身是分模块开发的，因此用户能看到诸如maven-core-3.0.jar、maven-model-3.0.jar之类的文件，此外这里还包含一些Maven用到的第三方依赖如commons-cli-1.2.jar、commons-lang-2.6.jar等等。 Maven常用命令说明mvn clean：表示运行清理操作（会默认把target文件夹中的数据清理）。mvn clean compile：表示先运行清理之后运行编译，会将代码编译到target文件夹中。mvn clean test：运行清理和测试。mvn clean package：运行清理和打包。mvn clean install：运行清理和安装，会将打好的包安装到本地仓库中，以便其他的项目可以调用。mvn clean deploy：运行清理和发布（发布到私服上面）。 上面的命令大部分都是连写的，大家也可以拆分分别执行，这是活的，看个人喜好以及使用需求，Eclipse Run as对maven项目会提供常用的命令。 设置http代理编辑seeting.xml文件有时候你所在的公司基于安全因素考虑，要求你使用通过安全认证的代理访问因特网。这种情况下，就需要为Maven配置HTTP代理，才能让它正常访问外部仓库，以下载所需要的资源。首先确认自己无法直接访问公共的maven中央仓库，直接运行命令ping repo1.maven.org可以检查网络。如果真的需要代理，先检查一下代理服务器是否畅通。比如现在有一个IP地址为218.14.227.197，端口为3128的代理服务，我们可以运行telnet 218.14.227.197 3128来检测该地址的该端口是否畅通。如果得到出错信息，需要先获取正确的代理服务信息，如果telnet连接正确，则输入ctrl+]，然后q，回车，退出即可。 检查完毕之后，编辑~/.m2/settings.xml文件(如果没有该文件，则复制$M2_HOME/conf/settings.xml)。添加代理配置如下： 1234567891011121314151617181920&lt;settings&gt; ... &lt;proxies&gt; &lt;proxy&gt; &lt;id&gt;my-proxy&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;host&gt;218.14.227.197&lt;/host&gt; &lt;port&gt;3128&lt;/port&gt; &lt;!-- &lt;username&gt;***&lt;/username&gt; &lt;password&gt;***&lt;/password&gt; &lt;nonProxyHosts&gt; repository.mycom.com|*.google.com &lt;/nonProxyHosts&gt; --&gt; &lt;/proxy&gt; &lt;/proxies&gt; ... &lt;/settings&gt; 这段配置十分简单，proxies下可以有多个proxy元素，如果声明了多个proxy元素，则默认情况下第一个被激活的proxy会生效。这里声明了一个id为my-proxy的代理，active的值为true表示激活该代理，protocol表示使用的代理协议，这里是http。当然，最重要的是指定正确的主机名(host元素)和端口(port元素)。上述xml配置中注释掉了username,password,nonProxyHosts几个元素。当代理服务需要认证时，就需要配置username和password。nonProxyHost元素用来指定哪些主机不需要代理，可以使用”|”符号来分隔多个主机名。此外，该配置也支持通配符，如:*.google.com表示所有以google.com结尾的域名访问都不要通过代理。 Maven插件安装，基于IDEA博主现在使用IDEA来开发的，所以这里介绍一下IDEA中如何配置引入我们上面下载好的Maven image.png Maven使用123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.tengj&lt;/groupId&gt; &lt;artifactId&gt;springBootDemo1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;springBootDemo1&lt;/name&gt;&lt;/project&gt; 代码的第一行是XML头，指定了该xml文档的版本和编码方式。project是所有pom.xml的根元素，它还声明了一些POM相关的命名空间及xsd元素。根元素下的第一个子元素modelVersion指定了当前的POM模型的版本，对于Maven3来说，它只能是4.0.0代码中最重要是包含了groupId,artifactId和version了。这三个元素定义了一个项目基本的坐标，在Maven的世界，任何的jar、pom或者jar都是以基于这些基本的坐标进行区分的。 groupId定义了项目属于哪个组，随意命名，比如谷歌公司的myapp项目，就取名为 com.google.myapp artifactId定义了当前Maven项目在组中唯一的ID,比如定义hello-world。 version指定了项目当前的版本0.0.1-SNAPSHOT,SNAPSHOT意为快照，说明该项目还处于开发中，是不稳定的。 name元素生命了一个对于用户更为友好的项目名称，虽然这不是必须的，但还是推荐为每个POM声明name,以方便信息交流 依赖的配置123456789101112131415161718192021&lt;project&gt;...&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;实际项目&lt;/groupId&gt; &lt;artifactId&gt;模块&lt;/artifactId&gt; &lt;version&gt;版本&lt;/version&gt; &lt;type&gt;依赖类型&lt;/type&gt; &lt;scope&gt;依赖范围&lt;/scope&gt; &lt;optional&gt;依赖是否可选&lt;/optional&gt; &lt;!—主要用于排除传递性依赖--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;…&lt;/groupId&gt; &lt;artifactId&gt;…&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;&lt;dependencies&gt;...&lt;/project&gt; 根元素project下的dependencies可以包含一个或者多个dependency元素，以声明一个或者多个项目依赖。每个依赖可以包含的元素有： grounpId、artifactId和version:以来的基本坐标，对于任何一个依赖来说，基本坐标是最重要的，Maven根据坐标才能找到需要的依赖。 type:依赖的类型，对于项目坐标定义的packaging。大部分情况下，该元素不必声明，其默认值为jar scope:依赖的范围 optional:标记依赖是否可选 exclusions:用来排除传递性依赖 依赖范围依赖范围就是用来控制依赖和三种classpath(编译classpath，测试classpath、运行classpath)的关系，Maven有如下几种依赖范围： compile:编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。典型的例子是spring-code,在编译、测试和运行的时候都需要使用该依赖。 test: 测试依赖范围。使用次依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此依赖。典型的例子是Jnuit,它只有在编译测试代码及运行测试的时候才需要。 provided:已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时候无效。典型的例子是servlet-api,编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器以及提供，就不需要Maven重复地引入一遍。 runtime:运行时依赖范围。使用此依赖范围的Maven依赖，对于测试和运行classpath有效，但在编译主代码时无效。典型的例子是JDBC驱动实现，项目主代码的编译只需要JDK提供的JDBC接口，只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动。 system:系统依赖范围。该依赖与三种classpath的关系，和provided依赖范围完全一致，但是，使用system范围的依赖时必须通过systemPath元素显示地指定依赖文件的路径。由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能构成构建的不可移植，因此应该谨慎使用。systemPath元素可以引用环境变量，如： 1234567&lt;dependency&gt; &lt;groupId&gt;javax.sql&lt;/groupId&gt; &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt; &lt;Version&gt;2.0&lt;/Version&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;systemPath&gt;$&#123;java.home&#125;/lib/rt.jar&lt;/systemPath&gt;&lt;/dependency&gt; import:导入依赖范围。该依赖范围不会对三种classpath产生实际的影响。上述除import以外的各种依赖范围与三种classpath的关系如下: image.png 传递性依赖比如一个account-email项目为例，account-email有一个compile范围的spring-code依赖，spring-code有一个compile范围的commons-logging依赖，那么commons-logging就会成为account-email的compile的范围依赖，commons-logging是account-email的一个传递性依赖 image.png 有了传递性依赖机制，在使用Spring Framework的时候就不用去考虑它依赖了什么，也不用担心引入多余的依赖。Maven会解析各个直接依赖的POM，将那些必要的间接依赖，以传递性依赖的形式引入到当前的项目中。 依赖范围假设A依赖于B,B依赖于C，我们说A对于B是第一直接依赖，B对于C是第二直接依赖，A对于C是传递性依赖。第一直接依赖和第二直接依赖的范围决定了传递性依赖的范围，如下图所示，最左边一行表示第一直接依赖范围，最上面一行表示第二直接依赖范围，中间的交叉单元格则表示传递依赖范围。 image.png 从上图中，我们可以发现这样的规律： 当第二直接依赖的范围是compile的时候，传递性依赖的范围与第一直接依赖的范围一致； 当第二直接依赖的范围是test的时候，依赖不会得以传递； 当第二直接依赖的范围是provided的时候，只传递第一直接依赖范围也为provided的依赖，切传递依赖的范围同样为provided; 当第二直接依赖的范围是runtime的时候，传递性依赖的范围与第一直接依赖的范围一致，但compile列外，此时传递性依赖范围为runtime. 依赖调解有时候，当传递性依赖造成为题的时候，就需要清楚地知道该传递性依赖是从哪条依赖路径引入的。这就是依赖调解的作用，依赖调解有两大原则： 路径最近者优先比如项目有A有这样的依赖关系：A-&gt;B-&gt;C-&gt;X(1.0)、A-&gt;D-&gt;X(2.0),X是A的传递性依赖，但是两条依赖路径上有两个版本的X，所以根据第一原则，A-&gt;D-&gt;X(2.0)路径短，所以X(2.0)会被解析使用 第一声明者优先如果路径都一样长的话，第一原则就不行了，比如 A-&gt;B-&gt;Y(1.0)、A-&gt;C-&gt;Y(2.0),Y(1.0)和Y(2.0)的路径一样，所以这时候根据第二原则，先声明的被解析。 可选依赖 image.png 如图，项目中A依赖B，B依赖于X和Y，如果所有这三个的范围都是compile的话，那么X和Y就是A的compile范围的传递性依赖，但是如果我想X,Y不作为A的传递性依赖，不给他用的话。就需要下面提到的配置可选依赖。 1234567891011121314151617181920&lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.juvenxu.mvnbook&lt;/groupId&gt; &lt;artifactId&gt;project-b&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.10&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;postgresql&lt;/groupId&gt; &lt;artifactId&gt;postgresql&lt;/groupId&gt; &lt;version&gt;8.4-701.jdbc3&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 配置也简单，在依赖里面添加 1&lt;optional&gt;true&lt;/optional&gt; 就表示可选依赖了，这样A如果想用X,Y就要直接显示的添加依赖了。 排除依赖有时候你引入的依赖中包含你不想要的依赖包，你想引入自己想要的，这时候就要用到排除依赖了，比如下图中spring-boot-starter-web自带了logback这个日志包，我想引入log4j2的，所以我先排除掉logback的依赖包，再引入想要的包就行了 image.png 排除依赖代码结构： 123456&lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt; &lt;/exclusion&gt;&lt;/exclusions&gt; 这里注意：声明exclustion的时候只需要groupId和artifactId，而不需要version元素，这是因为只需要groupId和artifactId就能唯一定位依赖图中的某个依赖。 归类依赖有时候我们引入的很多依赖包，他们都来自同一个项目的不同模块，所以他们的版本号都一样，这时候我们可以用属性来统一管理版本号 123456789101112131415161718192021&lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.juven.mvnbook.account&lt;/groupId&gt; &lt;artifactId&gt;accout-email&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;springframework.version&gt;1.5.6&lt;/springframework.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 如图所示，先通过 123&lt;/properties&gt; 这里定义你先要的版本&lt;/properties&gt; 来定义，然后在下面依赖使用${}来引入你的属性。 仓库这节将介绍仓库的由来、布局、分类、配置、内部工作机制、镜像等概念 仓库的由来在Maven世界中，任何一个依赖、插件或者项目构建的输出，都可以称为构件。得益于坐标机制，任何Maven项目使用任何一个构件的方式都是完全相同的。在此基础上，Maven可以在某个位置统一存储所有Maven项目共享的构件，这个统一的位置就是仓库。 实际的Maven项目将不再各自存储其依赖文件，它们只需要声明这些依赖的坐标，在需要的时候（例如，编译项目的时候需要将依赖加入到classpath中），Maven会自动根据坐标找到仓库中的构件，并使用它们。 为了实现重用，项目构建完毕后可生成的构件也可以安装或者部署到仓库中，供其他项目使用。 仓库的布局任何一个构件都有其唯一的坐标，根据这个坐标可以定义其在仓库中的唯一存储路径，这便是Maven的仓库布局方式。该路经与坐标对应关系为groupId/artifactId/version/artifactId-version.packaging。举个例子，比如下面这个分页插件依赖如下： 12345&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt; 那他对应的仓库的路径就是这样： image.png Maven仓库是基于简单文件系统存储的，我们也理解其存储方式、因此，当遇到一些与仓库相关的问题时，可以很方便的查找相关文件，方便定位问题。 仓库的分类 image.png 本地仓库一般来说，在Maven项目目录下，没有诸如lib/这样用来存放依赖文件的目录。当Maven在执行编译或测试时，如果需要使用依赖文件，它总是基于坐标使用本地仓库的依赖文件。 默认情况下，不管在Window还是Linux下，每个用户在自己用户目录下都有一个路径名为.m2/repository/的仓库目录。如果你想自定义本地仓库目录地址。你可以编辑文件~/.m2/settings.xml，设置localRepository元素的值为想要的仓库地址，例如: 123&lt;settings&gt;&lt;localRepository&gt;D:\java\repository\&lt;/localRepository&gt;&lt;/settings&gt; 这样，该用户的本地仓库地址就被设置成了 D:\java\repository\。需要注意的是，默认情况下，~/.m2/settings.xml文件不存在，用户需要从Maven安装目录复制$M2_HOME/conf/settings.xml文件再进行编辑。 远程仓库-中央仓库由于最原始的本地仓库是空的，Maven必须知道至少一个可用的远程仓库，才能在执行Maven命令的时候下载到需要的构件。中央仓库就是这样一个默认的远程仓库，Maven的安装文件自带了中央仓库的配置。 中央仓库包含了这个世界上绝大多数流行的开源Java构件，以及源码、作者信息、SCM,信息、许可证信息等，每个月这里都会接受全世界Java程序员大概1亿次的访问，它对全世界Java开发者的贡献由此可见一斑。 远程仓库-私服私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。因此，一些无法从外部仓库下载到的构件也能从本地上传到私服上供大家使用。私服的好处： 节省自己的外网速度 加速Maven构建 部署第三方构建 提高稳定性，增强控制 降低中央仓库的负荷 远程仓库的配置在平时的开发中，我们往往不会使用默认的中央仓库，默认的中央仓库访问的速度比较慢，访问的人或许很多，有时候也无法满足我们项目的需求，可能项目需要的某些构件中央仓库中是没有的，而在其他远程仓库中有，如JBoss Maven仓库。这时，可以在pom.xml中配置该仓库，代码如下： 1234567891011121314151617&lt;!-- 配置远程仓库 --&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jboss&lt;/id&gt; &lt;name&gt;JBoss Repository&lt;/name&gt; &lt;url&gt;http://repository.jboss.com/maven2/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;updatePolicy&gt;daily&lt;/updatePolicy&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt; &lt;/snapshots&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt; repository:在repositories元素下，可以使用repository子元素声明一个或者多个远程仓库。 id：仓库声明的唯一id，尤其需要注意的是，Maven自带的中央仓库使用的id为central，如果其他仓库声明也使用该id，就会覆盖中央仓库的配置。 name：仓库的名称，让我们直观方便的知道仓库是哪个，暂时没发现其他太大的含义。 url：指向了仓库的地址，一般来说，该地址都基于http协议，Maven用户都可以在浏览器中打开仓库地址浏览构件。 releases和snapshots：用来控制Maven对于发布版构件和快照版构件的下载权限。需要注意的是enabled子元素，该例中releases的enabled值为true，表示开启JBoss仓库的发布版本下载支持，而snapshots的enabled值为false，表示关闭JBoss仓库的快照版本的下载支持。根据该配置，Maven只会从JBoss仓库下载发布版的构件，而不会下载快照版的构件。 layout：元素值default表示仓库的布局是Maven2及Maven3的默认布局，而不是Maven1的布局。基本不会用到Maven1的布局。 其他：对于releases和snapshots来说，除了enabled，它们还包含另外两个子元素updatePolicy和checksumPolicy。1：元素updatePolicy用来配置Maven从远处仓库检查更新的频率，默认值是daily，表示Maven每天检查一次。其他可用的值包括：never-从不检查更新；always-每次构建都检查更新；interval：X-每隔X分钟检查一次更新（X为任意整数）。2：元素checksumPolicy用来配置Maven检查校验和文件的策略。当构建被部署到Maven仓库中时，会同时部署对应的检验和文件。在下载构件的时候，Maven会验证校验和文件，如果校验和验证失败，当checksumPolicy的值为默认的warn时，Maven会在执行构建时输出警告信息，其他可用的值包括：fail-Maven遇到校验和错误就让构建失败；ignore-使Maven完全忽略校验和错误。 远程仓库的认证大部分的远程仓库不需要认证，但是如果是自己内部使用，为了安全起见，还是要配置认证信息的。配置认证信息和配置远程仓库不同，远程仓库可以直接在pom.xml中配置，但是认证信息必须配置在settings.xml文件中。这是因为pom往往是被提交到代码仓库中供所有成员访问的，而settings.xml一般只存在于本机。因此，在settings.xml中配置认证信息更为安全。 123456789101112&lt;settings&gt; 2 ... 3 &lt;!--配置远程仓库认证信息--&gt; 4 &lt;servers&gt; 5 &lt;server&gt; 6 &lt;id&gt;releases&lt;/id&gt; 7 &lt;username&gt;admin&lt;/username&gt; 8 &lt;password&gt;admin123&lt;/password&gt; 9 &lt;/server&gt;10 &lt;/servers&gt;11 ...12 &lt;/settings&gt; 这里除了配置账号密码之外，值关键的就是id了，这个id要跟你在pom.xml里面配置的远程仓库repository的id一致，正是这个id将认证信息与仓库配置联系在了一起。 部署构件至远程仓库我们自己搭建远程仓库的目的就是为了可以方便部署我们自己项目的构件以及一些无法从外部仓库直接获取的构件。这样才能在开发时，供其他对团队成员使用。Maven除了能对项目进行编译、测试、打包之外，还能将项目生成的构件部署到远程仓库中。首先，需要编辑项目的pom.xml文件。配置distributionManagement元素，代码如下： 123456789101112&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;releases&lt;/id&gt; &lt;name&gt;public&lt;/name&gt; &lt;url&gt;http://59.50.95.66:8081/nexus/content/repositories/releases&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;name&gt;Snapshots&lt;/name&gt; &lt;url&gt;http://59.50.95.66:8081/nexus/content/repositories/snapshots&lt;/url&gt; &lt;/snapshotRepository&gt;&lt;/distributionManagement&gt; 看代码，从命名上就看的出来区别，repository表示表示发布版本（稳定版本）构件的仓库，snapshotRepository表示快照版本（开发测试版本）的仓库。这两个元素都需要配置id、name和url，id为远程仓库的唯一标识，name是为了方便人阅读，关键的url表示该仓库的地址。 配置好了就运行命令mvn clean deploy，Maven就会将项目构建输出的构件部署到配置对应的远程仓库，如果项目当前的版本是快照版本，则部署到快照版本的仓库地址，否则就部署到发布版本的仓库地址。当前项目是快照还是发布版本是通过 true 这个来区分的。忘记的同学在看看上面的## 远程仓库的配置。 镜像如果仓库X可以提供仓库Y存储的所有内容，那么就可以认为X是Y的一个镜像。用过Maven的都知道，国外的中央仓库用起来太慢了，所以选择一个国内的镜像就很有必要，我推荐国内的阿里云镜像。阿里云镜像：配置很简单，修改conf文件夹下的settings.xml文件，添加如下镜像配置： 12345678&lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt; 上例子中，的值为central,表示该配置为中央库的镜像，任何对于中央仓库的请求都会转至该镜像，用户也可以用同样的方法配置其他仓库的镜像 这里介绍下&lt;mirrorOf&gt;配置的各种选项 &lt;mirrorOf&gt;*&lt;mirrorOf&gt;:匹配所有远程仓库。 &lt;mirrorOf&gt;external:*&lt;mirrorOf&gt;:匹配所有远程仓库，使用localhost的除外，使用file://协议的除外。也就是说，匹配所有不在本机上的远程仓库。 &lt;mirrorOf&gt;repo1,repo2&lt;mirrorOf&gt;:匹配仓库repo1h和repo2，使用逗号分隔多个远程仓库。 &lt;mirrorOf&gt;*,!repo1&lt;mirrorOf&gt;:匹配所有远程仓库，repo1除外，使用感叹号将仓库从匹配中排除。 需要注意的是，由于镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或者停止服务的时候，Maven仍将无法访问被镜像仓库，因而将无法下载构件。 仓库服务搜索这里介绍2个提供仓库服务搜索的地址： Sonatype Nexus：https://repository.sonatype.org/ MVNrepository：http://mvnrepository.com/ ——————— 本文来地址请点击：https://www.jianshu.com/p/41d07cf95482]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>必须掌握</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BigDecimal精度转换]]></title>
    <url>%2F2018%2F09%2F25%2FBigDecimal%E7%B2%BE%E5%BA%A6%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[BigDecimal通常在涉及到精确计算的时候会用到，下面是自己多次错误使用BigDecimal的总结。 结论： BigDecimal初始化小数时，尽量用字符串形式，例如new BigDecimal(“0.1”); BigDecimal类型变量比较大小时用compareTo方法，判断变量值是否为0，与BigDecimal.ZERO比较大小。 BigDecimal作除法时，除了要考虑除数是否为0，更要考虑是否能除尽的问题，直接调用BigDecimal divide**(BigDecimal divisor, int scale, int roundingMode)**方法做除法可以避免除不尽的问题。 初始化BigDecimal变量：1234567 //BigDecimal初始化 public static void testBigDecimalinit() &#123; BigDecimal num1 = new BigDecimal(0.1); System.out.println("坑点1：num1="+num1);//坑点1：num1=0.100000000000000005551115123125782702118158340454101562 BigDecimal num2 = new BigDecimal("0.1");System.out.println("正确写法：num2="+num2);//正确写法：num2=0.1 &#125; 结论：尽量用字符串的形式初始化，因为小数在计算机内部根本没法精确表示。 比较大小比较BigDecimal类型的变量和0的大小，用compareTo，不要用equals： 1234567891011121314151617if (num1.compareTo(BigDecimal.ZERO)&gt;0)if (num1.compareTo(BigDecimal.ZERO)&lt;0)if (num1.compareTo(BigDecimal.ZERO)==0) //比较大小 public static void testBigDecimalCompareTo() &#123; BigDecimal num1 = new BigDecimal("0.1"); BigDecimal num2 = new BigDecimal("0.100"); if (!num1.equals(num2)) &#123; System.out.println("坑点1，用equals比较大小，num1="+num1+", num2="+num2+" 【不相等】"); &#125; if (!(num1 == num2)) &#123; System.out.println("坑点2，用==运算符比较大小，num1="+num1+", num2="+num2+" 【不相等】"); &#125; if (num1.compareTo(num2) == 0) &#123; System.out.println("正确比较大小，用compareTo，num1="+num1+", num2="+num2+" 【相等】"); &#125; &#125; 结论：比较大小或者值是否相等，用compareTo方法 BigDecimal除法在出现除不尽的时候，会出现问题，例如1/3的问题： 12345678//BigDecimal除法 public static void testBigDecimalDivide() &#123; BigDecimal num1 = new BigDecimal("1"); //坑点：Exception in thread "main" java.lang.ArithmeticException: Non-terminating decima l expansion; no exact representable decimal result.// System.out.println("坑点写法1："+num1.divide(new BigDecimal("3")));// System.out.println("坑点写法2："+num1.divide(new BigDecimal("3")).setScale(2, BigDecimal.ROUND_DOWN)); System.out.println("正确写法："+num1.divide(new BigDecimal("3"), 2, BigDecimal.ROUND_HALF_DOWN)); &#125; 结论：只有在divide的时候就设置好要精确的小数位数和舍入模式，才能避免出现无法精确表达除不尽的问题。 ——————— 本文来自 h4x0r_007 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/h4x0r_007/article/details/45171141?utm_source=copy]]></content>
      <categories>
        <category>开发中遇到的 bug</category>
      </categories>
      <tags>
        <tag>BigDecimal</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客添加图片]]></title>
    <url>%2F2018%2F09%2F22%2FHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[配置开启生成博文文件夹选项​ 把主页配置和文件 _config.yml 里的 post_asset_folder: 这个选项的值改为 true 安装插件​ 在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件 生成带文件夹的博文​ 运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹 引入图片最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片： 注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。 验证查看​ 最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是，而不是&lt;img src=”xxxx/图片名.jpg&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片]]></content>
      <categories>
        <category>Hexo-NexT</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 入门使用]]></title>
    <url>%2F2018%2F09%2F21%2FGit-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[第一步 先初始化 git 仓库 到需要cd到 git 管理的文件下 cd *** 使用 git init 初始化 git 仓库 git init 第二步 在 gitee 或者 github 上建立远程仓库Gitee GitHub 第三步 建立本地和远程的连接git pull origin master --allow-unrelated-histories 第四步 把要提交的东西天剑到暂存区 首先使用 git status 查看暂存区是否有要提交的文件 假设没有文件 则使用 git dd &lt;这个文件的相对路径&gt; 如果要添加全部 则使用 git add . 第五步 提交暂存区的文件到本地 Gitgit commit -m &quot;注释&quot; 第六步 把本地仓库 push 到远程仓库git push -u origin master 这个时候大家会发现它报错了 惊喜吧 别着急 咱们马上说解决方法 错误如下 [rejected] master -> master (fetch first)123456error: failed to push some refs to &apos;https://gitee.com/stardf/Hexo-Next.git&apos;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details. ` 解决方法: 先拉去一下远程仓库 git pull origin master --allow-unrelated-histories 然后再推送到远程仓库 git push origin master 第七步 建立自己的分支为什么要建立自己的分支呢，因为实际操作都不允许直接在 master 主分支上进行提交 只有先到自己的分支 然后合并到主分支才可以 建立自己的本地分支 git checkouut -b &lt;要创建的分支名&gt; 如 git checkout -b dev_test hexo_zmy 这行命令的意思是创建并且切换到这个分支 使用 git branch 查看当前的分支 带 * 就代表目前是那个分支 修改文件提交到自己现在使用的本地分支 git commit -m &quot;&quot; 本地分支推送到远程分支 若是不推送的话 这个分支只会存在你本地 远程仓库也不会出现这个分支的远程分支 git push --set-upstream origin 本地分支名:远程分支名 这行命令执行后 就会先在远程仓库建立一个远程分支 名字就是你的远程分支名 然后把现在使用的本地分支推送到这个远程分支 第八步 把自己的分支合并到主分支 Master 首先切换到 本地Master主分支、 git checkout master 合并别的分支 git merge &lt;被合并的分支名&gt; 这个时候你的本地 master 分支已经成功合并了 hexo_zmy 的分支但是远程分支上还没有所以好 合并后的本地分支需要推送到远程分支 git push origin master 这个时候远程仓库也会出现合并的内容了 第九步 一些技巧和常用的命令一定要注意 一定要注意 一定要注意 在每次提交前先拉取，有冲突解决冲突再提交 再说一些常用的命令 git常用命令： git init //初始化本地git环境 git clone XXX//克隆一份代码到本地仓库 git pull //把远程库的代码更新到工作台 git pull –rebase origin master //强制把远程库的代码跟新到当前分支上面 git fetch //把远程库的代码更新到本地库 git add . //把本地的修改加到stage中 git commit -m ‘comments here’ //把stage中的修改提交到本地库 git push //把本地库的修改提交到远程库中 git branch -r/-a //查看远程分支/全部分支 git checkout master/branch //切换到某个分支 git checkout -b test //新建test分支 git checkout -d test //删除test分支 git merge master //假设当前在test分支上面，把master分支上的修改同步到test分支上 git merge tool //调用merge工具 git stash //把未完成的修改缓存到栈容器中 git stash list //查看所有的缓存 git stash pop //恢复本地分支到缓存状态 git blame someFile //查看某个文件的每一行的修改记录（）谁在什么时候修改的） git status //查看当前分支有哪些修改 git log //查看当前分支上面的日志信息 git diff //查看当前没有add的内容 git diff –cache //查看已经add但是没有commit的内容 git diff HEAD //上面两个内容的合并 git reset –hard HEAD //撤销本地修改 echo $HOME //查看git config的HOME路径 export $HOME=/c/gitconfig //配置git config的HOME路径 团队协作git操作流程： 克隆一个全新的项目，完成新功能并且提交： git clone XXX //克隆代码库 git checkout -b test //新建分支 modify some files //完成修改 git add . //把修改加入stage中 git commit -m ‘’ //提交修改到test分支 review代码 git checkout master //切换到master分支 git pull //更新代码 git checkout test //切换到test分支 git meger master //把master分支的代码merge到test分支 git push origin 分支名//把test分支的代码push到远程库 目前正在test分支上面开发某个功能，但是没有完成。突然一个紧急的bug需要处理 git add . git stash git checkout bugFixBranch git pull –rebase origin master fix the bug git add . git commit -m ‘’ git push git checkout test git stash pop continue new feature’s development git工作流]]></content>
      <categories>
        <category>GIt</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>基础</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象-抽象]]></title>
    <url>%2F2018%2F09%2F21%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%8A%BD%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[面向对象分析与设计的主要任务是？找出类和对象，构建对象模型。 对象模型的主要元素？ 抽象 封装 模块化和层次结构 对象模型的次要元素？ 类型 并发 持久 抽象描述了一个对象的基本特征，可以将这个对象与所有其他类型的对象区分开来，因此提供了清晰定义的概念边界，它与观察者的角度有关。 抽象关注一个对象的外部视图，用来分离对象的基本行为和实现。我们可以理解为抽象关注接口，即可观察到的行为；而封装则关注这些行为的实现。 面向对象设计的核心问题是对于给定问题找出一组正确的抽象 面向对象设计的核心问题的复杂度取决于抽象的类型和质量 抽象的两个原则 最少承诺原则：对象的接口之提供它的行为 最少惊奇原则：对象捕捉了某个对象的全部行为，不多也不少。并且不提供抽象之外的惊奇效果和副作用。 评判抽象的品质 耦合：模块之间的关联强度应该是比较弱的，既低耦合。 内聚：模块内的各个元素的联系是紧密的，既高内聚。 充分性：类或模块应该记录某个抽象足够多的特征，从而允许有意义的，有效的交互。 完整性：类和模块的接口记录了它的全部特征。 基础性：只有访问该抽象的底层表现形式才能够有效的实现那些操作。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA 编程思想 第一次阅读]]></title>
    <url>%2F2018%2F09%2F21%2FJAVA-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3-%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[阅读笔记编程语言是什么？是人类用来和机器交互以用来解决现实问题的一种语言！ 几乎所有语言中都有的抽象机制是什么？抽象就是从众多事物中抽取出来他们本质性的特征，而舍弃其非本质的特征]]></content>
      <categories>
        <category>阅读理解</category>
      </categories>
      <tags>
        <tag>抽象</tag>
      </tags>
  </entry>
</search>
